{
  "version": 3,
  "sources": ["../../node_modules/i18n-iso-countries/codes.json", "../../node_modules/i18n-iso-countries/supportedLocales.json", "../../node_modules/diacritics/index.js", "../../node_modules/i18n-iso-countries/index.js"],
  "sourcesContent": ["[\n  [\"AF\", \"AFG\", \"004\", \"ISO 3166-2:AF\"],\n  [\"AL\", \"ALB\", \"008\", \"ISO 3166-2:AL\"],\n  [\"DZ\", \"DZA\", \"012\", \"ISO 3166-2:DZ\"],\n  [\"AS\", \"ASM\", \"016\", \"ISO 3166-2:AS\"],\n  [\"AD\", \"AND\", \"020\", \"ISO 3166-2:AD\"],\n  [\"AO\", \"AGO\", \"024\", \"ISO 3166-2:AO\"],\n  [\"AI\", \"AIA\", \"660\", \"ISO 3166-2:AI\"],\n  [\"AQ\", \"ATA\", \"010\", \"ISO 3166-2:AQ\"],\n  [\"AG\", \"ATG\", \"028\", \"ISO 3166-2:AG\"],\n  [\"AR\", \"ARG\", \"032\", \"ISO 3166-2:AR\"],\n  [\"AM\", \"ARM\", \"051\", \"ISO 3166-2:AM\"],\n  [\"AW\", \"ABW\", \"533\", \"ISO 3166-2:AW\"],\n  [\"AU\", \"AUS\", \"036\", \"ISO 3166-2:AU\"],\n  [\"AT\", \"AUT\", \"040\", \"ISO 3166-2:AT\"],\n  [\"AZ\", \"AZE\", \"031\", \"ISO 3166-2:AZ\"],\n  [\"BS\", \"BHS\", \"044\", \"ISO 3166-2:BS\"],\n  [\"BH\", \"BHR\", \"048\", \"ISO 3166-2:BH\"],\n  [\"BD\", \"BGD\", \"050\", \"ISO 3166-2:BD\"],\n  [\"BB\", \"BRB\", \"052\", \"ISO 3166-2:BB\"],\n  [\"BY\", \"BLR\", \"112\", \"ISO 3166-2:BY\"],\n  [\"BE\", \"BEL\", \"056\", \"ISO 3166-2:BE\"],\n  [\"BZ\", \"BLZ\", \"084\", \"ISO 3166-2:BZ\"],\n  [\"BJ\", \"BEN\", \"204\", \"ISO 3166-2:BJ\"],\n  [\"BM\", \"BMU\", \"060\", \"ISO 3166-2:BM\"],\n  [\"BT\", \"BTN\", \"064\", \"ISO 3166-2:BT\"],\n  [\"BO\", \"BOL\", \"068\", \"ISO 3166-2:BO\"],\n  [\"BA\", \"BIH\", \"070\", \"ISO 3166-2:BA\"],\n  [\"BW\", \"BWA\", \"072\", \"ISO 3166-2:BW\"],\n  [\"BV\", \"BVT\", \"074\", \"ISO 3166-2:BV\"],\n  [\"BR\", \"BRA\", \"076\", \"ISO 3166-2:BR\"],\n  [\"IO\", \"IOT\", \"086\", \"ISO 3166-2:IO\"],\n  [\"BN\", \"BRN\", \"096\", \"ISO 3166-2:BN\"],\n  [\"BG\", \"BGR\", \"100\", \"ISO 3166-2:BG\"],\n  [\"BF\", \"BFA\", \"854\", \"ISO 3166-2:BF\"],\n  [\"BI\", \"BDI\", \"108\", \"ISO 3166-2:BI\"],\n  [\"KH\", \"KHM\", \"116\", \"ISO 3166-2:KH\"],\n  [\"CM\", \"CMR\", \"120\", \"ISO 3166-2:CM\"],\n  [\"CA\", \"CAN\", \"124\", \"ISO 3166-2:CA\"],\n  [\"CV\", \"CPV\", \"132\", \"ISO 3166-2:CV\"],\n  [\"KY\", \"CYM\", \"136\", \"ISO 3166-2:KY\"],\n  [\"CF\", \"CAF\", \"140\", \"ISO 3166-2:CF\"],\n  [\"TD\", \"TCD\", \"148\", \"ISO 3166-2:TD\"],\n  [\"CL\", \"CHL\", \"152\", \"ISO 3166-2:CL\"],\n  [\"CN\", \"CHN\", \"156\", \"ISO 3166-2:CN\"],\n  [\"CX\", \"CXR\", \"162\", \"ISO 3166-2:CX\"],\n  [\"CC\", \"CCK\", \"166\", \"ISO 3166-2:CC\"],\n  [\"CO\", \"COL\", \"170\", \"ISO 3166-2:CO\"],\n  [\"KM\", \"COM\", \"174\", \"ISO 3166-2:KM\"],\n  [\"CG\", \"COG\", \"178\", \"ISO 3166-2:CG\"],\n  [\"CD\", \"COD\", \"180\", \"ISO 3166-2:CD\"],\n  [\"CK\", \"COK\", \"184\", \"ISO 3166-2:CK\"],\n  [\"CR\", \"CRI\", \"188\", \"ISO 3166-2:CR\"],\n  [\"CI\", \"CIV\", \"384\", \"ISO 3166-2:CI\"],\n  [\"HR\", \"HRV\", \"191\", \"ISO 3166-2:HR\"],\n  [\"CU\", \"CUB\", \"192\", \"ISO 3166-2:CU\"],\n  [\"CY\", \"CYP\", \"196\", \"ISO 3166-2:CY\"],\n  [\"CZ\", \"CZE\", \"203\", \"ISO 3166-2:CZ\"],\n  [\"DK\", \"DNK\", \"208\", \"ISO 3166-2:DK\"],\n  [\"DJ\", \"DJI\", \"262\", \"ISO 3166-2:DJ\"],\n  [\"DM\", \"DMA\", \"212\", \"ISO 3166-2:DM\"],\n  [\"DO\", \"DOM\", \"214\", \"ISO 3166-2:DO\"],\n  [\"EC\", \"ECU\", \"218\", \"ISO 3166-2:EC\"],\n  [\"EG\", \"EGY\", \"818\", \"ISO 3166-2:EG\"],\n  [\"SV\", \"SLV\", \"222\", \"ISO 3166-2:SV\"],\n  [\"GQ\", \"GNQ\", \"226\", \"ISO 3166-2:GQ\"],\n  [\"ER\", \"ERI\", \"232\", \"ISO 3166-2:ER\"],\n  [\"EE\", \"EST\", \"233\", \"ISO 3166-2:EE\"],\n  [\"ET\", \"ETH\", \"231\", \"ISO 3166-2:ET\"],\n  [\"FK\", \"FLK\", \"238\", \"ISO 3166-2:FK\"],\n  [\"FO\", \"FRO\", \"234\", \"ISO 3166-2:FO\"],\n  [\"FJ\", \"FJI\", \"242\", \"ISO 3166-2:FJ\"],\n  [\"FI\", \"FIN\", \"246\", \"ISO 3166-2:FI\"],\n  [\"FR\", \"FRA\", \"250\", \"ISO 3166-2:FR\"],\n  [\"GF\", \"GUF\", \"254\", \"ISO 3166-2:GF\"],\n  [\"PF\", \"PYF\", \"258\", \"ISO 3166-2:PF\"],\n  [\"TF\", \"ATF\", \"260\", \"ISO 3166-2:TF\"],\n  [\"GA\", \"GAB\", \"266\", \"ISO 3166-2:GA\"],\n  [\"GM\", \"GMB\", \"270\", \"ISO 3166-2:GM\"],\n  [\"GE\", \"GEO\", \"268\", \"ISO 3166-2:GE\"],\n  [\"DE\", \"DEU\", \"276\", \"ISO 3166-2:DE\"],\n  [\"GH\", \"GHA\", \"288\", \"ISO 3166-2:GH\"],\n  [\"GI\", \"GIB\", \"292\", \"ISO 3166-2:GI\"],\n  [\"GR\", \"GRC\", \"300\", \"ISO 3166-2:GR\"],\n  [\"GL\", \"GRL\", \"304\", \"ISO 3166-2:GL\"],\n  [\"GD\", \"GRD\", \"308\", \"ISO 3166-2:GD\"],\n  [\"GP\", \"GLP\", \"312\", \"ISO 3166-2:GP\"],\n  [\"GU\", \"GUM\", \"316\", \"ISO 3166-2:GU\"],\n  [\"GT\", \"GTM\", \"320\", \"ISO 3166-2:GT\"],\n  [\"GN\", \"GIN\", \"324\", \"ISO 3166-2:GN\"],\n  [\"GW\", \"GNB\", \"624\", \"ISO 3166-2:GW\"],\n  [\"GY\", \"GUY\", \"328\", \"ISO 3166-2:GY\"],\n  [\"HT\", \"HTI\", \"332\", \"ISO 3166-2:HT\"],\n  [\"HM\", \"HMD\", \"334\", \"ISO 3166-2:HM\"],\n  [\"VA\", \"VAT\", \"336\", \"ISO 3166-2:VA\"],\n  [\"HN\", \"HND\", \"340\", \"ISO 3166-2:HN\"],\n  [\"HK\", \"HKG\", \"344\", \"ISO 3166-2:HK\"],\n  [\"HU\", \"HUN\", \"348\", \"ISO 3166-2:HU\"],\n  [\"IS\", \"ISL\", \"352\", \"ISO 3166-2:IS\"],\n  [\"IN\", \"IND\", \"356\", \"ISO 3166-2:IN\"],\n  [\"ID\", \"IDN\", \"360\", \"ISO 3166-2:ID\"],\n  [\"IR\", \"IRN\", \"364\", \"ISO 3166-2:IR\"],\n  [\"IQ\", \"IRQ\", \"368\", \"ISO 3166-2:IQ\"],\n  [\"IE\", \"IRL\", \"372\", \"ISO 3166-2:IE\"],\n  [\"IL\", \"ISR\", \"376\", \"ISO 3166-2:IL\"],\n  [\"IT\", \"ITA\", \"380\", \"ISO 3166-2:IT\"],\n  [\"JM\", \"JAM\", \"388\", \"ISO 3166-2:JM\"],\n  [\"JP\", \"JPN\", \"392\", \"ISO 3166-2:JP\"],\n  [\"JO\", \"JOR\", \"400\", \"ISO 3166-2:JO\"],\n  [\"KZ\", \"KAZ\", \"398\", \"ISO 3166-2:KZ\"],\n  [\"KE\", \"KEN\", \"404\", \"ISO 3166-2:KE\"],\n  [\"KI\", \"KIR\", \"296\", \"ISO 3166-2:KI\"],\n  [\"KP\", \"PRK\", \"408\", \"ISO 3166-2:KP\"],\n  [\"KR\", \"KOR\", \"410\", \"ISO 3166-2:KR\"],\n  [\"KW\", \"KWT\", \"414\", \"ISO 3166-2:KW\"],\n  [\"KG\", \"KGZ\", \"417\", \"ISO 3166-2:KG\"],\n  [\"LA\", \"LAO\", \"418\", \"ISO 3166-2:LA\"],\n  [\"LV\", \"LVA\", \"428\", \"ISO 3166-2:LV\"],\n  [\"LB\", \"LBN\", \"422\", \"ISO 3166-2:LB\"],\n  [\"LS\", \"LSO\", \"426\", \"ISO 3166-2:LS\"],\n  [\"LR\", \"LBR\", \"430\", \"ISO 3166-2:LR\"],\n  [\"LY\", \"LBY\", \"434\", \"ISO 3166-2:LY\"],\n  [\"LI\", \"LIE\", \"438\", \"ISO 3166-2:LI\"],\n  [\"LT\", \"LTU\", \"440\", \"ISO 3166-2:LT\"],\n  [\"LU\", \"LUX\", \"442\", \"ISO 3166-2:LU\"],\n  [\"MO\", \"MAC\", \"446\", \"ISO 3166-2:MO\"],\n  [\"MG\", \"MDG\", \"450\", \"ISO 3166-2:MG\"],\n  [\"MW\", \"MWI\", \"454\", \"ISO 3166-2:MW\"],\n  [\"MY\", \"MYS\", \"458\", \"ISO 3166-2:MY\"],\n  [\"MV\", \"MDV\", \"462\", \"ISO 3166-2:MV\"],\n  [\"ML\", \"MLI\", \"466\", \"ISO 3166-2:ML\"],\n  [\"MT\", \"MLT\", \"470\", \"ISO 3166-2:MT\"],\n  [\"MH\", \"MHL\", \"584\", \"ISO 3166-2:MH\"],\n  [\"MQ\", \"MTQ\", \"474\", \"ISO 3166-2:MQ\"],\n  [\"MR\", \"MRT\", \"478\", \"ISO 3166-2:MR\"],\n  [\"MU\", \"MUS\", \"480\", \"ISO 3166-2:MU\"],\n  [\"YT\", \"MYT\", \"175\", \"ISO 3166-2:YT\"],\n  [\"MX\", \"MEX\", \"484\", \"ISO 3166-2:MX\"],\n  [\"FM\", \"FSM\", \"583\", \"ISO 3166-2:FM\"],\n  [\"MD\", \"MDA\", \"498\", \"ISO 3166-2:MD\"],\n  [\"MC\", \"MCO\", \"492\", \"ISO 3166-2:MC\"],\n  [\"MN\", \"MNG\", \"496\", \"ISO 3166-2:MN\"],\n  [\"MS\", \"MSR\", \"500\", \"ISO 3166-2:MS\"],\n  [\"MA\", \"MAR\", \"504\", \"ISO 3166-2:MA\"],\n  [\"MZ\", \"MOZ\", \"508\", \"ISO 3166-2:MZ\"],\n  [\"MM\", \"MMR\", \"104\", \"ISO 3166-2:MM\"],\n  [\"NA\", \"NAM\", \"516\", \"ISO 3166-2:NA\"],\n  [\"NR\", \"NRU\", \"520\", \"ISO 3166-2:NR\"],\n  [\"NP\", \"NPL\", \"524\", \"ISO 3166-2:NP\"],\n  [\"NL\", \"NLD\", \"528\", \"ISO 3166-2:NL\"],\n  [\"NC\", \"NCL\", \"540\", \"ISO 3166-2:NC\"],\n  [\"NZ\", \"NZL\", \"554\", \"ISO 3166-2:NZ\"],\n  [\"NI\", \"NIC\", \"558\", \"ISO 3166-2:NI\"],\n  [\"NE\", \"NER\", \"562\", \"ISO 3166-2:NE\"],\n  [\"NG\", \"NGA\", \"566\", \"ISO 3166-2:NG\"],\n  [\"NU\", \"NIU\", \"570\", \"ISO 3166-2:NU\"],\n  [\"NF\", \"NFK\", \"574\", \"ISO 3166-2:NF\"],\n  [\"MP\", \"MNP\", \"580\", \"ISO 3166-2:MP\"],\n  [\"MK\", \"MKD\", \"807\", \"ISO 3166-2:MK\"],\n  [\"NO\", \"NOR\", \"578\", \"ISO 3166-2:NO\"],\n  [\"OM\", \"OMN\", \"512\", \"ISO 3166-2:OM\"],\n  [\"PK\", \"PAK\", \"586\", \"ISO 3166-2:PK\"],\n  [\"PW\", \"PLW\", \"585\", \"ISO 3166-2:PW\"],\n  [\"PS\", \"PSE\", \"275\", \"ISO 3166-2:PS\"],\n  [\"PA\", \"PAN\", \"591\", \"ISO 3166-2:PA\"],\n  [\"PG\", \"PNG\", \"598\", \"ISO 3166-2:PG\"],\n  [\"PY\", \"PRY\", \"600\", \"ISO 3166-2:PY\"],\n  [\"PE\", \"PER\", \"604\", \"ISO 3166-2:PE\"],\n  [\"PH\", \"PHL\", \"608\", \"ISO 3166-2:PH\"],\n  [\"PN\", \"PCN\", \"612\", \"ISO 3166-2:PN\"],\n  [\"PL\", \"POL\", \"616\", \"ISO 3166-2:PL\"],\n  [\"PT\", \"PRT\", \"620\", \"ISO 3166-2:PT\"],\n  [\"PR\", \"PRI\", \"630\", \"ISO 3166-2:PR\"],\n  [\"QA\", \"QAT\", \"634\", \"ISO 3166-2:QA\"],\n  [\"RE\", \"REU\", \"638\", \"ISO 3166-2:RE\"],\n  [\"RO\", \"ROU\", \"642\", \"ISO 3166-2:RO\"],\n  [\"RU\", \"RUS\", \"643\", \"ISO 3166-2:RU\"],\n  [\"RW\", \"RWA\", \"646\", \"ISO 3166-2:RW\"],\n  [\"SH\", \"SHN\", \"654\", \"ISO 3166-2:SH\"],\n  [\"KN\", \"KNA\", \"659\", \"ISO 3166-2:KN\"],\n  [\"LC\", \"LCA\", \"662\", \"ISO 3166-2:LC\"],\n  [\"PM\", \"SPM\", \"666\", \"ISO 3166-2:PM\"],\n  [\"VC\", \"VCT\", \"670\", \"ISO 3166-2:VC\"],\n  [\"WS\", \"WSM\", \"882\", \"ISO 3166-2:WS\"],\n  [\"SM\", \"SMR\", \"674\", \"ISO 3166-2:SM\"],\n  [\"ST\", \"STP\", \"678\", \"ISO 3166-2:ST\"],\n  [\"SA\", \"SAU\", \"682\", \"ISO 3166-2:SA\"],\n  [\"SN\", \"SEN\", \"686\", \"ISO 3166-2:SN\"],\n  [\"SC\", \"SYC\", \"690\", \"ISO 3166-2:SC\"],\n  [\"SL\", \"SLE\", \"694\", \"ISO 3166-2:SL\"],\n  [\"SG\", \"SGP\", \"702\", \"ISO 3166-2:SG\"],\n  [\"SK\", \"SVK\", \"703\", \"ISO 3166-2:SK\"],\n  [\"SI\", \"SVN\", \"705\", \"ISO 3166-2:SI\"],\n  [\"SB\", \"SLB\", \"090\", \"ISO 3166-2:SB\"],\n  [\"SO\", \"SOM\", \"706\", \"ISO 3166-2:SO\"],\n  [\"ZA\", \"ZAF\", \"710\", \"ISO 3166-2:ZA\"],\n  [\"GS\", \"SGS\", \"239\", \"ISO 3166-2:GS\"],\n  [\"ES\", \"ESP\", \"724\", \"ISO 3166-2:ES\"],\n  [\"LK\", \"LKA\", \"144\", \"ISO 3166-2:LK\"],\n  [\"SD\", \"SDN\", \"729\", \"ISO 3166-2:SD\"],\n  [\"SR\", \"SUR\", \"740\", \"ISO 3166-2:SR\"],\n  [\"SJ\", \"SJM\", \"744\", \"ISO 3166-2:SJ\"],\n  [\"SZ\", \"SWZ\", \"748\", \"ISO 3166-2:SZ\"],\n  [\"SE\", \"SWE\", \"752\", \"ISO 3166-2:SE\"],\n  [\"CH\", \"CHE\", \"756\", \"ISO 3166-2:CH\"],\n  [\"SY\", \"SYR\", \"760\", \"ISO 3166-2:SY\"],\n  [\"TW\", \"TWN\", \"158\", \"ISO 3166-2:TW\"],\n  [\"TJ\", \"TJK\", \"762\", \"ISO 3166-2:TJ\"],\n  [\"TZ\", \"TZA\", \"834\", \"ISO 3166-2:TZ\"],\n  [\"TH\", \"THA\", \"764\", \"ISO 3166-2:TH\"],\n  [\"TL\", \"TLS\", \"626\", \"ISO 3166-2:TL\"],\n  [\"TG\", \"TGO\", \"768\", \"ISO 3166-2:TG\"],\n  [\"TK\", \"TKL\", \"772\", \"ISO 3166-2:TK\"],\n  [\"TO\", \"TON\", \"776\", \"ISO 3166-2:TO\"],\n  [\"TT\", \"TTO\", \"780\", \"ISO 3166-2:TT\"],\n  [\"TN\", \"TUN\", \"788\", \"ISO 3166-2:TN\"],\n  [\"TR\", \"TUR\", \"792\", \"ISO 3166-2:TR\"],\n  [\"TM\", \"TKM\", \"795\", \"ISO 3166-2:TM\"],\n  [\"TC\", \"TCA\", \"796\", \"ISO 3166-2:TC\"],\n  [\"TV\", \"TUV\", \"798\", \"ISO 3166-2:TV\"],\n  [\"UG\", \"UGA\", \"800\", \"ISO 3166-2:UG\"],\n  [\"UA\", \"UKR\", \"804\", \"ISO 3166-2:UA\"],\n  [\"AE\", \"ARE\", \"784\", \"ISO 3166-2:AE\"],\n  [\"GB\", \"GBR\", \"826\", \"ISO 3166-2:GB\"],\n  [\"US\", \"USA\", \"840\", \"ISO 3166-2:US\"],\n  [\"UM\", \"UMI\", \"581\", \"ISO 3166-2:UM\"],\n  [\"UY\", \"URY\", \"858\", \"ISO 3166-2:UY\"],\n  [\"UZ\", \"UZB\", \"860\", \"ISO 3166-2:UZ\"],\n  [\"VU\", \"VUT\", \"548\", \"ISO 3166-2:VU\"],\n  [\"VE\", \"VEN\", \"862\", \"ISO 3166-2:VE\"],\n  [\"VN\", \"VNM\", \"704\", \"ISO 3166-2:VN\"],\n  [\"VG\", \"VGB\", \"092\", \"ISO 3166-2:VG\"],\n  [\"VI\", \"VIR\", \"850\", \"ISO 3166-2:VI\"],\n  [\"WF\", \"WLF\", \"876\", \"ISO 3166-2:WF\"],\n  [\"EH\", \"ESH\", \"732\", \"ISO 3166-2:EH\"],\n  [\"YE\", \"YEM\", \"887\", \"ISO 3166-2:YE\"],\n  [\"ZM\", \"ZMB\", \"894\", \"ISO 3166-2:ZM\"],\n  [\"ZW\", \"ZWE\", \"716\", \"ISO 3166-2:ZW\"],\n  [\"AX\", \"ALA\", \"248\", \"ISO 3166-2:AX\"],\n  [\"BQ\", \"BES\", \"535\", \"ISO 3166-2:BQ\"],\n  [\"CW\", \"CUW\", \"531\", \"ISO 3166-2:CW\"],\n  [\"GG\", \"GGY\", \"831\", \"ISO 3166-2:GG\"],\n  [\"IM\", \"IMN\", \"833\", \"ISO 3166-2:IM\"],\n  [\"JE\", \"JEY\", \"832\", \"ISO 3166-2:JE\"],\n  [\"ME\", \"MNE\", \"499\", \"ISO 3166-2:ME\"],\n  [\"BL\", \"BLM\", \"652\", \"ISO 3166-2:BL\"],\n  [\"MF\", \"MAF\", \"663\", \"ISO 3166-2:MF\"],\n  [\"RS\", \"SRB\", \"688\", \"ISO 3166-2:RS\"],\n  [\"SX\", \"SXM\", \"534\", \"ISO 3166-2:SX\"],\n  [\"SS\", \"SSD\", \"728\", \"ISO 3166-2:SS\"],\n  [\"XK\", \"XKK\", \"983\", \"ISO 3166-2:XK\"]\n]\n", "[\n\t\"br\",\n\t\"cy\",\n\t\"dv\",\n\t\"sw\",\n\t\"eu\",\n\t\"af\",\n\t\"am\",\n\t\"ha\",\n\t\"ku\",\n\t\"ml\",\n\t\"mt\",\n\t\"no\",\n\t\"ps\",\n\t\"sd\",\n\t\"so\",\n\t\"sq\",\n\t\"ta\",\n\t\"tg\",\n\t\"tt\",\n\t\"ug\",\n\t\"ur\",\n\t\"vi\",\n\t\"ar\",\n\t\"az\",\n\t\"be\",\n\t\"bg\",\n\t\"bn\",\n\t\"bs\",\n\t\"ca\",\n\t\"cs\",\n\t\"da\",\n\t\"de\",\n\t\"el\",\n\t\"en\",\n\t\"es\",\n\t\"et\",\n\t\"fa\",\n\t\"fi\",\n\t\"fr\",\n\t\"ga\",\n\t\"gl\",\n\t\"he\",\n\t\"hi\",\n\t\"hr\",\n\t\"hu\",\n\t\"hy\",\n\t\"id\",\n\t\"is\",\n\t\"it\",\n\t\"ja\",\n\t\"ka\",\n\t\"kk\",\n\t\"km\",\n\t\"ko\",\n\t\"ky\",\n\t\"lt\",\n\t\"lv\",\n\t\"mk\",\n\t\"mn\",\n\t\"mr\",\n\t\"ms\",\n\t\"nb\",\n\t\"nl\",\n\t\"nn\",\n\t\"pl\",\n\t\"pt\",\n\t\"ro\",\n\t\"ru\",\n\t\"sk\",\n\t\"sl\",\n\t\"sr\",\n\t\"sv\",\n\t\"th\",\n\t\"tr\",\n\t\"uk\",\n\t\"uz\",\n\t\"zh\"\n]\n", "exports.remove = removeDiacritics;\n\nvar replacementList = [\n  {\n    base: ' ',\n    chars: \"\\u00A0\",\n  }, {\n    base: '0',\n    chars: \"\\u07C0\",\n  }, {\n    base: 'A',\n    chars: \"\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F\",\n  }, {\n    base: 'AA',\n    chars: \"\\uA732\",\n  }, {\n    base: 'AE',\n    chars: \"\\u00C6\\u01FC\\u01E2\",\n  }, {\n    base: 'AO',\n    chars: \"\\uA734\",\n  }, {\n    base: 'AU',\n    chars: \"\\uA736\",\n  }, {\n    base: 'AV',\n    chars: \"\\uA738\\uA73A\",\n  }, {\n    base: 'AY',\n    chars: \"\\uA73C\",\n  }, {\n    base: 'B',\n    chars: \"\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0181\",\n  }, {\n    base: 'C',\n    chars: \"\\u24b8\\uff23\\uA73E\\u1E08\\u0106\\u0043\\u0108\\u010A\\u010C\\u00C7\\u0187\\u023B\",\n  }, {\n    base: 'D',\n    chars: \"\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018A\\u0189\\u1D05\\uA779\",\n  }, {\n    base: 'Dh',\n    chars: \"\\u00D0\",\n  }, {\n    base: 'DZ',\n    chars: \"\\u01F1\\u01C4\",\n  }, {\n    base: 'Dz',\n    chars: \"\\u01F2\\u01C5\",\n  }, {\n    base: 'E',\n    chars: \"\\u025B\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\\u1D07\",\n  }, {\n    base: 'F',\n    chars: \"\\uA77C\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B\",\n  }, {\n    base: 'G',\n    chars: \"\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\\u0262\",\n  }, {\n    base: 'H',\n    chars: \"\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D\",\n  }, {\n    base: 'I',\n    chars: \"\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197\",\n  }, {\n    base: 'J',\n    chars: \"\\u24BF\\uFF2A\\u0134\\u0248\\u0237\",\n  }, {\n    base: 'K',\n    chars: \"\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2\",\n  }, {\n    base: 'L',\n    chars: \"\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780\",\n  }, {\n    base: 'LJ',\n    chars: \"\\u01C7\",\n  }, {\n    base: 'Lj',\n    chars: \"\\u01C8\",\n  }, {\n    base: 'M',\n    chars: \"\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\\u03FB\",\n  }, {\n    base: 'N',\n    chars: \"\\uA7A4\\u0220\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u019D\\uA790\\u1D0E\",\n  }, {\n    base: 'NJ',\n    chars: \"\\u01CA\",\n  }, {\n    base: 'Nj',\n    chars: \"\\u01CB\",\n  }, {\n    base: 'O',\n    chars: \"\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C\",\n  }, {\n    base: 'OE',\n    chars: \"\\u0152\",\n  }, {\n    base: 'OI',\n    chars: \"\\u01A2\",\n  }, {\n    base: 'OO',\n    chars: \"\\uA74E\",\n  }, {\n    base: 'OU',\n    chars: \"\\u0222\",\n  }, {\n    base: 'P',\n    chars: \"\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754\",\n  }, {\n    base: 'Q',\n    chars: \"\\u24C6\\uFF31\\uA756\\uA758\\u024A\",\n  }, {\n    base: 'R',\n    chars: \"\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782\",\n  }, {\n    base: 'S',\n    chars: \"\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784\",\n  }, {\n    base: 'T',\n    chars: \"\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786\",\n  }, {\n    base: 'Th',\n    chars: \"\\u00DE\",\n  }, {\n    base: 'TZ',\n    chars: \"\\uA728\",\n  }, {\n    base: 'U',\n    chars: \"\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244\",\n  }, {\n    base: 'V',\n    chars: \"\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245\",\n  }, {\n    base: 'VY',\n    chars: \"\\uA760\",\n  }, {\n    base: 'W',\n    chars: \"\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72\",\n  }, {\n    base: 'X',\n    chars: \"\\u24CD\\uFF38\\u1E8A\\u1E8C\",\n  }, {\n    base: 'Y',\n    chars: \"\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE\",\n  }, {\n    base: 'Z',\n    chars: \"\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762\",\n  }, {\n    base: 'a',\n    chars: \"\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251\",\n  }, {\n    base: 'aa',\n    chars: \"\\uA733\",\n  }, {\n    base: 'ae',\n    chars: \"\\u00E6\\u01FD\\u01E3\",\n  }, {\n    base: 'ao',\n    chars: \"\\uA735\",\n  }, {\n    base: 'au',\n    chars: \"\\uA737\",\n  }, {\n    base: 'av',\n    chars: \"\\uA739\\uA73B\",\n  }, {\n    base: 'ay',\n    chars: \"\\uA73D\",\n  }, {\n    base: 'b',\n    chars: \"\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0182\",\n  }, {\n    base: 'c',\n    chars: \"\\uFF43\\u24D2\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184\",\n  }, {\n    base: 'd',\n    chars: \"\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\u018B\\u13E7\\u0501\\uA7AA\",\n  }, {\n    base: 'dh',\n    chars: \"\\u00F0\",\n  }, {\n    base: 'dz',\n    chars: \"\\u01F3\\u01C6\",\n  }, {\n    base: 'e',\n    chars: \"\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u01DD\",\n  }, {\n    base: 'f',\n    chars: \"\\u24D5\\uFF46\\u1E1F\\u0192\",\n  }, {\n    base: 'ff',\n    chars: \"\\uFB00\",\n  }, {\n    base: 'fi',\n    chars: \"\\uFB01\",\n  }, {\n    base: 'fl',\n    chars: \"\\uFB02\",\n  }, {\n    base: 'ffi',\n    chars: \"\\uFB03\",\n  }, {\n    base: 'ffl',\n    chars: \"\\uFB04\",\n  }, {\n    base: 'g',\n    chars: \"\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\uA77F\\u1D79\",\n  }, {\n    base: 'h',\n    chars: \"\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265\",\n  }, {\n    base: 'hv',\n    chars: \"\\u0195\",\n  }, {\n    base: 'i',\n    chars: \"\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\",\n  }, {\n    base: 'j',\n    chars: \"\\u24D9\\uFF4A\\u0135\\u01F0\\u0249\",\n  }, {\n    base: 'k',\n    chars: \"\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\",\n  }, {\n    base: 'l',\n    chars: \"\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u026D\",\n  }, {\n    base: 'lj',\n    chars: \"\\u01C9\",\n  }, {\n    base: 'm',\n    chars: \"\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\",\n  }, {\n    base: 'n',\n    chars: \"\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509\",\n  }, {\n    base: 'nj',\n    chars: \"\\u01CC\",\n  }, {\n    base: 'o',\n    chars: \"\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\uA74B\\uA74D\\u0275\\u0254\\u1D11\",\n  }, {\n    base: 'oe',\n    chars: \"\\u0153\",\n  }, {\n    base: 'oi',\n    chars: \"\\u01A3\",\n  }, {\n    base: 'oo',\n    chars: \"\\uA74F\",\n  }, {\n    base: 'ou',\n    chars: \"\\u0223\",\n  }, {\n    base: 'p',\n    chars: \"\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u03C1\",\n  }, {\n    base: 'q',\n    chars: \"\\u24E0\\uFF51\\u024B\\uA757\\uA759\",\n  }, {\n    base: 'r',\n    chars: \"\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\",\n  }, {\n    base: 's',\n    chars: \"\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0282\",\n  }, {\n    base: 'ss',\n    chars: \"\\xDF\",\n  }, {\n    base: 't',\n    chars: \"\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\",\n  }, {\n    base: 'th',\n    chars: \"\\u00FE\",\n  }, {\n    base: 'tz',\n    chars: \"\\uA729\",\n  }, {\n    base: 'u',\n    chars: \"\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\",\n  }, {\n    base: 'v',\n    chars: \"\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\",\n  }, {\n    base: 'vy',\n    chars: \"\\uA761\",\n  }, {\n    base: 'w',\n    chars: \"\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73\",\n  }, {\n    base: 'x',\n    chars: \"\\u24E7\\uFF58\\u1E8B\\u1E8D\",\n  }, {\n    base: 'y',\n    chars: \"\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\",\n  }, {\n    base: 'z',\n    chars: \"\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\",\n  }\n];\n\nvar diacriticsMap = {};\nfor (var i = 0; i < replacementList.length; i += 1) {\n  var chars = replacementList[i].chars;\n  for (var j = 0; j < chars.length; j += 1) {\n    diacriticsMap[chars[j]] = replacementList[i].base;\n  }\n}\n\nfunction removeDiacritics(str) {\n  return str.replace(/[^\\u0000-\\u007e]/g, function(c) {\n    return diacriticsMap[c] || c;\n  });\n}\n\nexports.replacementList = replacementList;\nexports.diacriticsMap = diacriticsMap;\n", "\"use strict\";\n\nconst codes = require(\"./codes.json\");\nconst supportedLocales = require(\"./supportedLocales.json\");\nconst removeDiacritics = require(\"diacritics\").remove;\nconst registeredLocales = {};\n\n/*\n * All codes map to ISO 3166-1 alpha-2\n */\nconst alpha2 = {},\n  alpha3 = {},\n  numeric = {},\n  invertedNumeric = {};\n\ncodes.forEach(function (codeInformation) {\n  const s = codeInformation;\n  alpha2[s[0]] = s[1];\n  alpha3[s[1]] = s[0];\n  numeric[s[2]] = s[0];\n  invertedNumeric[s[0]] = s[2];\n});\n\n/**\n * @private\n * @param {number} code\n */\nfunction formatNumericCode(code) {\n  return String(\"000\" + (code ? code : \"\")).slice(-3);\n}\n\n/**\n * @private\n * Avoid using obj.hasOwnProperty directly as `hasOwnProperty` could be a\n * property in itself ({ hasOwnProperty: 1 }) and cause weird bugs\n * https://eslint.org/docs/rules/no-prototype-builtins\n */\nfunction hasOwnProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\n\n/**\n * @private\n * Pass localeList through a filter and return a newLocaleList obj\n * with the same structure of the old localeList.\n *\n * @param {LocalizedCountryNames} localeList  Local List in raw\n * @param {Function} filter    callback to set filter rule\n * @return {String | String[]} new filtered Local List\n */\nfunction localeFilter(localeList, filter) {\n  return Object.keys(localeList).reduce(function (newLocaleList, alpha2) {\n    const nameList = localeList[alpha2];\n    newLocaleList[alpha2] = filter(nameList, alpha2);\n    return newLocaleList;\n  }, {});\n}\n\n/**\n * @private\n * Preserve for getName & getNames\n *\n * @param {GetNameOptions.select} type all | official | alias\n * @param countryNameList  string array of country's\n *                         official name and alias\n * @return {String | String[]} of a country name\n */\nfunction filterNameBy(type, countryNameList) {\n  switch (type) {\n    case \"official\":\n      return Array.isArray(countryNameList)\n        ? countryNameList[0]\n        : countryNameList;\n\n    case \"all\":\n      return typeof countryNameList === \"string\"\n        ? [countryNameList]\n        : countryNameList;\n\n    case \"alias\":\n      return Array.isArray(countryNameList)\n        ? countryNameList[1] || countryNameList[0]\n        : countryNameList;\n\n    default:\n      throw new TypeError(\n        \"LocaleNameType must be one of these: all, official, alias!\"\n      );\n  }\n}\n\n/**\n * Register countries in browsers' environment:\n * @param {object} localeData\n * @example countries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n * @return void\n */\nexports.registerLocale = function (localeData) {\n  if (!localeData.locale) {\n    throw new TypeError(\"Missing localeData.locale\");\n  }\n\n  if (!localeData.countries) {\n    throw new TypeError(\"Missing localeData.countries\");\n  }\n\n  registeredLocales[localeData.locale] = localeData.countries;\n};\n\n/*\n * @param code Alpha-3 code\n * @return Alpha-2 code or undefined\n */\nfunction alpha3ToAlpha2(code) {\n  return alpha3[code];\n}\nexports.alpha3ToAlpha2 = alpha3ToAlpha2;\n\n/*\n * @param code Alpha-2 code\n * @return Alpha-3 code or undefined\n */\nfunction alpha2ToAlpha3(code) {\n  return alpha2[code];\n}\nexports.alpha2ToAlpha3 = alpha2ToAlpha3;\n\n/*\n * @param code Alpha-3 code\n * @return Numeric code or undefined\n */\nfunction alpha3ToNumeric(code) {\n  return invertedNumeric[alpha3ToAlpha2(code)];\n}\nexports.alpha3ToNumeric = alpha3ToNumeric;\n\n/*\n * @param code Alpha-2 code\n * @return Numeric code or undefined\n */\nfunction alpha2ToNumeric(code) {\n  return invertedNumeric[code];\n}\nexports.alpha2ToNumeric = alpha2ToNumeric;\n\n/*\n * @param code Numeric code\n * @return Alpha-3 code or undefined\n */\nfunction numericToAlpha3(code) {\n  const padded = formatNumericCode(code);\n  return alpha2ToAlpha3(numeric[padded]);\n}\nexports.numericToAlpha3 = numericToAlpha3;\n\n/*\n * @param code Numeric code\n * @return Alpha-2 code or undefined\n */\nfunction numericToAlpha2(code) {\n  const padded = formatNumericCode(code);\n  return numeric[padded];\n}\nexports.numericToAlpha2 = numericToAlpha2;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-3\n */\nfunction toAlpha3(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha3(code);\n    }\n    if (code.length === 2) {\n      return alpha2ToAlpha3(code.toUpperCase());\n    }\n    if (code.length === 3) {\n      return code.toUpperCase();\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha3(code);\n  }\n  return undefined;\n}\nexports.toAlpha3 = toAlpha3;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-2\n */\nfunction toAlpha2(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha2(code);\n    }\n    if (code.length === 2) {\n      return code.toUpperCase();\n    }\n    if (code.length === 3) {\n      return alpha3ToAlpha2(code.toUpperCase());\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha2(code);\n  }\n  return undefined;\n}\nexports.toAlpha2 = toAlpha2;\n\n/**\n * @param {string | number | Alpha2Code | Alpha3Code} code\n * @param {String} lang          language for country name\n * @param {GetNameOptions} options\n * @return {String | String[] | undefined}  name\n */\nexports.getName = function (code, lang, options = {}) {\n  if (!(\"select\" in options)) {\n    options.select = \"official\";\n  }\n  try {\n    const codeMaps = registeredLocales[lang.toLowerCase()];\n    const nameList = codeMaps[toAlpha2(code)];\n    return filterNameBy(options.select, nameList);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/**\n * @param {String} lang             language for country names\n * @param {GetNameOptions} options   getNames Options\n * @return {LocalizedCountryNames}  country code\n *                                  mapped to county name\n */\nexports.getNames = function (lang, options = {}) {\n  if (!(\"select\" in options)) {\n    options.select = \"official\";\n  }\n  const localeList = registeredLocales[lang.toLowerCase()];\n  if (localeList === undefined) return {};\n  return localeFilter(localeList, function (nameList) {\n    return filterNameBy(options.select, nameList);\n  });\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getAlpha2Code = function (name, lang) {\n  const normalizeString = (string) => string.toLowerCase();\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\n\n  try {\n    const codenames = registeredLocales[lang.toLowerCase()];\n    for (const p in codenames) {\n      if (!hasOwnProperty(codenames, p)) {\n        continue;\n      }\n      if (typeof codenames[p] === \"string\") {\n        if (areSimilar(codenames[p], name)) {\n          return p;\n        }\n      }\n      if (Array.isArray(codenames[p])) {\n        for (const mappedName of codenames[p]) {\n          if (areSimilar(mappedName, name)) {\n            return p;\n          }\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getSimpleAlpha2Code = function (name, lang) {\n  const normalizeString = (string) => removeDiacritics(string.toLowerCase());\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\n\n  try {\n    const codenames = registeredLocales[lang.toLowerCase()];\n    for (const p in codenames) {\n      if (!hasOwnProperty(codenames, p)) {\n        continue;\n      }\n      if (typeof codenames[p] === \"string\") {\n        if (areSimilar(codenames[p], name)) {\n          return p;\n        }\n      }\n      if (Array.isArray(codenames[p])) {\n        for (const mappedName of codenames[p]) {\n          if (areSimilar(mappedName, name)) {\n            return p;\n          }\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-2 codes mapped to alpha-3 codes\n */\nexports.getAlpha2Codes = function () {\n  return alpha2;\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getAlpha3Code = function (name, lang) {\n  const alpha2 = exports.getAlpha2Code(name, lang);\n  if (alpha2) {\n    return exports.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getSimpleAlpha3Code = function (name, lang) {\n  const alpha2 = exports.getSimpleAlpha2Code(name, lang);\n  if (alpha2) {\n    return exports.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-3 codes mapped to alpha-2 codes\n */\nexports.getAlpha3Codes = function () {\n  return alpha3;\n};\n\n/*\n * @return Object of numeric codes mapped to alpha-2 codes\n */\nexports.getNumericCodes = function () {\n  return numeric;\n};\n\n/*\n * @return Array of registered languages\n */\nexports.langs = function () {\n  return Object.keys(registeredLocales);\n};\n\n/*\n * @return Array of supported languages\n */\nexports.getSupportedLanguages = function () {\n  return supportedLocales;\n};\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return Boolean\n */\nexports.isValid = function (code) {\n  if (!code) {\n    return false;\n  }\n\n  const coerced = code.toString().toUpperCase();\n  return (\n    hasOwnProperty(alpha3, coerced) ||\n    hasOwnProperty(alpha2, coerced) ||\n    hasOwnProperty(numeric, coerced)\n  );\n};\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAAA,MACE,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,MACpC,CAAC,MAAM,OAAO,OAAO,eAAe;AAAA,IACtC;AAAA;AAAA;;;AC3PA;AAAA;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AA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",
  "names": ["alpha2"]
}
